/*
 * This file is generated by jOOQ.
 */
package com.github.davinkevin.podcastserver.database.tables;


import com.github.davinkevin.podcastserver.database.Keys;
import com.github.davinkevin.podcastserver.database.Public;
import com.github.davinkevin.podcastserver.database.tables.records.PodcastRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Podcast extends TableImpl<PodcastRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.podcast</code>
     */
    public static final Podcast PODCAST = new Podcast();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PodcastRecord> getRecordType() {
        return PodcastRecord.class;
    }

    /**
     * The column <code>public.podcast.id</code>.
     */
    public final TableField<PodcastRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.podcast.description</code>.
     */
    public final TableField<PodcastRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(65535), this, "");

    /**
     * The column <code>public.podcast.has_to_be_deleted</code>.
     */
    public final TableField<PodcastRecord, Boolean> HAS_TO_BE_DELETED = createField(DSL.name("has_to_be_deleted"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.podcast.last_update</code>.
     */
    public final TableField<PodcastRecord, OffsetDateTime> LAST_UPDATE = createField(DSL.name("last_update"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.podcast.signature</code>.
     */
    public final TableField<PodcastRecord, String> SIGNATURE = createField(DSL.name("signature"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.podcast.title</code>.
     */
    public final TableField<PodcastRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.podcast.type</code>.
     */
    public final TableField<PodcastRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.podcast.url</code>.
     */
    public final TableField<PodcastRecord, String> URL = createField(DSL.name("url"), SQLDataType.VARCHAR(65535), this, "");

    /**
     * The column <code>public.podcast.cover_id</code>.
     */
    public final TableField<PodcastRecord, UUID> COVER_ID = createField(DSL.name("cover_id"), SQLDataType.UUID, this, "");

    private Podcast(Name alias, Table<PodcastRecord> aliased) {
        this(alias, aliased, null);
    }

    private Podcast(Name alias, Table<PodcastRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.podcast</code> table reference
     */
    public Podcast(String alias) {
        this(DSL.name(alias), PODCAST);
    }

    /**
     * Create an aliased <code>public.podcast</code> table reference
     */
    public Podcast(Name alias) {
        this(alias, PODCAST);
    }

    /**
     * Create a <code>public.podcast</code> table reference
     */
    public Podcast() {
        this(DSL.name("podcast"), null);
    }

    public <O extends Record> Podcast(Table<O> child, ForeignKey<O, PodcastRecord> key) {
        super(child, key, PODCAST);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<PodcastRecord> getPrimaryKey() {
        return Keys.PODCAST_PKEY;
    }

    @Override
    public List<UniqueKey<PodcastRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.PODCAST_URL_KEY);
    }

    @Override
    public List<ForeignKey<PodcastRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PODCAST__PODCAST_COVER_ID_FKEY);
    }

    private transient Cover _cover;

    /**
     * Get the implicit join path to the <code>public.cover</code> table.
     */
    public Cover cover() {
        if (_cover == null)
            _cover = new Cover(this, Keys.PODCAST__PODCAST_COVER_ID_FKEY);

        return _cover;
    }

    @Override
    public Podcast as(String alias) {
        return new Podcast(DSL.name(alias), this);
    }

    @Override
    public Podcast as(Name alias) {
        return new Podcast(alias, this);
    }

    @Override
    public Podcast as(Table<?> alias) {
        return new Podcast(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Podcast rename(String name) {
        return new Podcast(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Podcast rename(Name name) {
        return new Podcast(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Podcast rename(Table<?> name) {
        return new Podcast(name.getQualifiedName(), null);
    }
}
