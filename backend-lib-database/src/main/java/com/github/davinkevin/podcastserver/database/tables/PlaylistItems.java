/*
 * This file is generated by jOOQ.
 */
package com.github.davinkevin.podcastserver.database.tables;


import com.github.davinkevin.podcastserver.database.Keys;
import com.github.davinkevin.podcastserver.database.Public;
import com.github.davinkevin.podcastserver.database.tables.records.PlaylistItemsRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PlaylistItems extends TableImpl<PlaylistItemsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.playlist_items</code>
     */
    public static final PlaylistItems PLAYLIST_ITEMS = new PlaylistItems();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlaylistItemsRecord> getRecordType() {
        return PlaylistItemsRecord.class;
    }

    /**
     * The column <code>public.playlist_items.playlists_id</code>.
     */
    public final TableField<PlaylistItemsRecord, UUID> PLAYLISTS_ID = createField(DSL.name("playlists_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.playlist_items.items_id</code>.
     */
    public final TableField<PlaylistItemsRecord, UUID> ITEMS_ID = createField(DSL.name("items_id"), SQLDataType.UUID.nullable(false), this, "");

    private PlaylistItems(Name alias, Table<PlaylistItemsRecord> aliased) {
        this(alias, aliased, null);
    }

    private PlaylistItems(Name alias, Table<PlaylistItemsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.playlist_items</code> table reference
     */
    public PlaylistItems(String alias) {
        this(DSL.name(alias), PLAYLIST_ITEMS);
    }

    /**
     * Create an aliased <code>public.playlist_items</code> table reference
     */
    public PlaylistItems(Name alias) {
        this(alias, PLAYLIST_ITEMS);
    }

    /**
     * Create a <code>public.playlist_items</code> table reference
     */
    public PlaylistItems() {
        this(DSL.name("playlist_items"), null);
    }

    public <O extends Record> PlaylistItems(Table<O> child, ForeignKey<O, PlaylistItemsRecord> key) {
        super(child, key, PLAYLIST_ITEMS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<PlaylistItemsRecord> getPrimaryKey() {
        return Keys.PLAYLIST_ITEMS_PKEY;
    }

    @Override
    public List<ForeignKey<PlaylistItemsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PLAYLIST_ITEMS__PLAYLIST_ITEMS_WATCH_LISTS_ID_FKEY, Keys.PLAYLIST_ITEMS__PLAYLIST_ITEMS_ITEMS_ID_FKEY);
    }

    private transient Playlist _playlist;
    private transient Item _item;

    /**
     * Get the implicit join path to the <code>public.playlist</code> table.
     */
    public Playlist playlist() {
        if (_playlist == null)
            _playlist = new Playlist(this, Keys.PLAYLIST_ITEMS__PLAYLIST_ITEMS_WATCH_LISTS_ID_FKEY);

        return _playlist;
    }

    /**
     * Get the implicit join path to the <code>public.item</code> table.
     */
    public Item item() {
        if (_item == null)
            _item = new Item(this, Keys.PLAYLIST_ITEMS__PLAYLIST_ITEMS_ITEMS_ID_FKEY);

        return _item;
    }

    @Override
    public PlaylistItems as(String alias) {
        return new PlaylistItems(DSL.name(alias), this);
    }

    @Override
    public PlaylistItems as(Name alias) {
        return new PlaylistItems(alias, this);
    }

    @Override
    public PlaylistItems as(Table<?> alias) {
        return new PlaylistItems(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PlaylistItems rename(String name) {
        return new PlaylistItems(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlaylistItems rename(Name name) {
        return new PlaylistItems(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlaylistItems rename(Table<?> name) {
        return new PlaylistItems(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, UUID> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super UUID, ? super UUID, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super UUID, ? super UUID, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
