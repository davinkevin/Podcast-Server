/*
 * This file is generated by jOOQ.
 */
package com.github.davinkevin.podcastserver.database.tables;


import com.github.davinkevin.podcastserver.database.Indexes;
import com.github.davinkevin.podcastserver.database.Keys;
import com.github.davinkevin.podcastserver.database.Public;
import com.github.davinkevin.podcastserver.database.enums.ItemStatus;
import com.github.davinkevin.podcastserver.database.tables.records.ItemRecord;

import java.nio.file.Path;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Check;
import org.jooq.Converter;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Item extends TableImpl<ItemRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.item</code>
     */
    public static final Item ITEM = new Item();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ItemRecord> getRecordType() {
        return ItemRecord.class;
    }

    /**
     * The column <code>public.item.id</code>.
     */
    public final TableField<ItemRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.item.creation_date</code>.
     */
    public final TableField<ItemRecord, OffsetDateTime> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.item.description</code>.
     */
    public final TableField<ItemRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.item.download_date</code>.
     */
    public final TableField<ItemRecord, OffsetDateTime> DOWNLOAD_DATE = createField(DSL.name("download_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.item.file_name</code>.
     */
    public final TableField<ItemRecord, Path> FILE_NAME = createField(DSL.name("file_name"), SQLDataType.VARCHAR(255), this, "", Converter.ofNullable(String.class, Path.class, Path::of, Path::toString));

    /**
     * The column <code>public.item.length</code>.
     */
    public final TableField<ItemRecord, Long> LENGTH = createField(DSL.name("length"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.item.mime_type</code>.
     */
    public final TableField<ItemRecord, String> MIME_TYPE = createField(DSL.name("mime_type"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.item.number_of_fail</code>.
     */
    public final TableField<ItemRecord, Integer> NUMBER_OF_FAIL = createField(DSL.name("number_of_fail"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.item.pub_date</code>.
     */
    public final TableField<ItemRecord, OffsetDateTime> PUB_DATE = createField(DSL.name("pub_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.item.title</code>.
     */
    public final TableField<ItemRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(254).nullable(false), this, "");

    /**
     * The column <code>public.item.url</code>.
     */
    public final TableField<ItemRecord, String> URL = createField(DSL.name("url"), SQLDataType.VARCHAR(65535), this, "");

    /**
     * The column <code>public.item.cover_id</code>.
     */
    public final TableField<ItemRecord, UUID> COVER_ID = createField(DSL.name("cover_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.item.podcast_id</code>.
     */
    public final TableField<ItemRecord, UUID> PODCAST_ID = createField(DSL.name("podcast_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.item.guid</code>.
     */
    public final TableField<ItemRecord, String> GUID = createField(DSL.name("guid"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.item.status</code>.
     */
    public final TableField<ItemRecord, ItemStatus> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field(DSL.raw("'NOT_DOWNLOADED'::item_status"), SQLDataType.VARCHAR)).asEnumDataType(com.github.davinkevin.podcastserver.database.enums.ItemStatus.class), this, "");

    private Item(Name alias, Table<ItemRecord> aliased) {
        this(alias, aliased, null);
    }

    private Item(Name alias, Table<ItemRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.item</code> table reference
     */
    public Item(String alias) {
        this(DSL.name(alias), ITEM);
    }

    /**
     * Create an aliased <code>public.item</code> table reference
     */
    public Item(Name alias) {
        this(alias, ITEM);
    }

    /**
     * Create a <code>public.item</code> table reference
     */
    public Item() {
        this(DSL.name("item"), null);
    }

    public <O extends Record> Item(Table<O> child, ForeignKey<O, ItemRecord> key) {
        super(child, key, ITEM);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ITEM_DOWNLOAD_DATE_ASC, Indexes.ITEM_DOWNLOAD_DATE_DESC, Indexes.ITEM_PUB_DATE_ASC, Indexes.ITEM_PUB_DATE_DESC, Indexes.ITEM_TITLE);
    }

    @Override
    public UniqueKey<ItemRecord> getPrimaryKey() {
        return Keys.ITEM_PKEY;
    }

    @Override
    public List<UniqueKey<ItemRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.ITEM_WITH_GUID_IS_UNIQUE_IN_PODCAST);
    }

    @Override
    public List<ForeignKey<ItemRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ITEM__ITEM_COVER_ID_FKEY, Keys.ITEM__ITEM_PODCAST_ID_FKEY);
    }

    private transient Cover _cover;
    private transient Podcast _podcast;

    /**
     * Get the implicit join path to the <code>public.cover</code> table.
     */
    public Cover cover() {
        if (_cover == null)
            _cover = new Cover(this, Keys.ITEM__ITEM_COVER_ID_FKEY);

        return _cover;
    }

    /**
     * Get the implicit join path to the <code>public.podcast</code> table.
     */
    public Podcast podcast() {
        if (_podcast == null)
            _podcast = new Podcast(this, Keys.ITEM__ITEM_PODCAST_ID_FKEY);

        return _podcast;
    }

    @Override
    public List<Check<ItemRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("item_mime_type_not_empty"), "((((mime_type)::text <> ''::text) AND ((mime_type)::text ~~ '%/%'::text)))", true)
        );
    }

    @Override
    public Item as(String alias) {
        return new Item(DSL.name(alias), this);
    }

    @Override
    public Item as(Name alias) {
        return new Item(alias, this);
    }

    @Override
    public Item as(Table<?> alias) {
        return new Item(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Item rename(String name) {
        return new Item(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Item rename(Name name) {
        return new Item(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Item rename(Table<?> name) {
        return new Item(name.getQualifiedName(), null);
    }
}
