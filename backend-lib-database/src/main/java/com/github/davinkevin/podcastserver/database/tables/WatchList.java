/*
 * This file is generated by jOOQ.
 */
package com.github.davinkevin.podcastserver.database.tables;


import com.github.davinkevin.podcastserver.database.Keys;
import com.github.davinkevin.podcastserver.database.Public;
import com.github.davinkevin.podcastserver.database.tables.Item.ItemPath;
import com.github.davinkevin.podcastserver.database.tables.WatchListItems.WatchListItemsPath;
import com.github.davinkevin.podcastserver.database.tables.records.WatchListRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class WatchList extends TableImpl<WatchListRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.watch_list</code>
     */
    public static final WatchList WATCH_LIST = new WatchList();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WatchListRecord> getRecordType() {
        return WatchListRecord.class;
    }

    /**
     * The column <code>public.watch_list.id</code>.
     */
    public final TableField<WatchListRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.watch_list.name</code>.
     */
    public final TableField<WatchListRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    private WatchList(Name alias, Table<WatchListRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private WatchList(Name alias, Table<WatchListRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.watch_list</code> table reference
     */
    public WatchList(String alias) {
        this(DSL.name(alias), WATCH_LIST);
    }

    /**
     * Create an aliased <code>public.watch_list</code> table reference
     */
    public WatchList(Name alias) {
        this(alias, WATCH_LIST);
    }

    /**
     * Create a <code>public.watch_list</code> table reference
     */
    public WatchList() {
        this(DSL.name("watch_list"), null);
    }

    public <O extends Record> WatchList(Table<O> path, ForeignKey<O, WatchListRecord> childPath, InverseForeignKey<O, WatchListRecord> parentPath) {
        super(path, childPath, parentPath, WATCH_LIST);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class WatchListPath extends WatchList implements Path<WatchListRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> WatchListPath(Table<O> path, ForeignKey<O, WatchListRecord> childPath, InverseForeignKey<O, WatchListRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private WatchListPath(Name alias, Table<WatchListRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public WatchListPath as(String alias) {
            return new WatchListPath(DSL.name(alias), this);
        }

        @Override
        public WatchListPath as(Name alias) {
            return new WatchListPath(alias, this);
        }

        @Override
        public WatchListPath as(Table<?> alias) {
            return new WatchListPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<WatchListRecord> getPrimaryKey() {
        return Keys.WATCH_LIST_PKEY;
    }

    @Override
    public List<UniqueKey<WatchListRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.WATCH_LIST_NAME_KEY);
    }

    private transient WatchListItemsPath _watchListItems;

    /**
     * Get the implicit to-many join path to the
     * <code>public.watch_list_items</code> table
     */
    public WatchListItemsPath watchListItems() {
        if (_watchListItems == null)
            _watchListItems = new WatchListItemsPath(this, null, Keys.WATCH_LIST_ITEMS__WATCH_LIST_ITEMS_WATCH_LISTS_ID_FKEY.getInverseKey());

        return _watchListItems;
    }

    /**
     * Get the implicit many-to-many join path to the <code>public.item</code>
     * table
     */
    public ItemPath item() {
        return watchListItems().item();
    }

    @Override
    public WatchList as(String alias) {
        return new WatchList(DSL.name(alias), this);
    }

    @Override
    public WatchList as(Name alias) {
        return new WatchList(alias, this);
    }

    @Override
    public WatchList as(Table<?> alias) {
        return new WatchList(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public WatchList rename(String name) {
        return new WatchList(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WatchList rename(Name name) {
        return new WatchList(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public WatchList rename(Table<?> name) {
        return new WatchList(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public WatchList where(Condition condition) {
        return new WatchList(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public WatchList where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public WatchList where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public WatchList where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public WatchList where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public WatchList where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public WatchList where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public WatchList where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public WatchList whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public WatchList whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
