/*
 * This file is generated by jOOQ.
 */
package com.github.davinkevin.podcastserver.database.tables;


import com.github.davinkevin.podcastserver.database.Keys;
import com.github.davinkevin.podcastserver.database.Public;
import com.github.davinkevin.podcastserver.database.tables.Podcast.PodcastPath;
import com.github.davinkevin.podcastserver.database.tables.Tag.TagPath;
import com.github.davinkevin.podcastserver.database.tables.records.PodcastTagsRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PodcastTags extends TableImpl<PodcastTagsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.podcast_tags</code>
     */
    public static final PodcastTags PODCAST_TAGS = new PodcastTags();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PodcastTagsRecord> getRecordType() {
        return PodcastTagsRecord.class;
    }

    /**
     * The column <code>public.podcast_tags.podcasts_id</code>.
     */
    public final TableField<PodcastTagsRecord, UUID> PODCASTS_ID = createField(DSL.name("podcasts_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.podcast_tags.tags_id</code>.
     */
    public final TableField<PodcastTagsRecord, UUID> TAGS_ID = createField(DSL.name("tags_id"), SQLDataType.UUID.nullable(false), this, "");

    private PodcastTags(Name alias, Table<PodcastTagsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PodcastTags(Name alias, Table<PodcastTagsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.podcast_tags</code> table reference
     */
    public PodcastTags(String alias) {
        this(DSL.name(alias), PODCAST_TAGS);
    }

    /**
     * Create an aliased <code>public.podcast_tags</code> table reference
     */
    public PodcastTags(Name alias) {
        this(alias, PODCAST_TAGS);
    }

    /**
     * Create a <code>public.podcast_tags</code> table reference
     */
    public PodcastTags() {
        this(DSL.name("podcast_tags"), null);
    }

    public <O extends Record> PodcastTags(Table<O> path, ForeignKey<O, PodcastTagsRecord> childPath, InverseForeignKey<O, PodcastTagsRecord> parentPath) {
        super(path, childPath, parentPath, PODCAST_TAGS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class PodcastTagsPath extends PodcastTags implements Path<PodcastTagsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> PodcastTagsPath(Table<O> path, ForeignKey<O, PodcastTagsRecord> childPath, InverseForeignKey<O, PodcastTagsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PodcastTagsPath(Name alias, Table<PodcastTagsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PodcastTagsPath as(String alias) {
            return new PodcastTagsPath(DSL.name(alias), this);
        }

        @Override
        public PodcastTagsPath as(Name alias) {
            return new PodcastTagsPath(alias, this);
        }

        @Override
        public PodcastTagsPath as(Table<?> alias) {
            return new PodcastTagsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<PodcastTagsRecord> getPrimaryKey() {
        return Keys.PODCAST_TAGS_PKEY;
    }

    @Override
    public List<ForeignKey<PodcastTagsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PODCAST_TAGS__PODCAST_TAGS_PODCASTS_ID_FKEY, Keys.PODCAST_TAGS__PODCAST_TAGS_TAGS_ID_FKEY);
    }

    private transient PodcastPath _podcast;

    /**
     * Get the implicit join path to the <code>public.podcast</code> table.
     */
    public PodcastPath podcast() {
        if (_podcast == null)
            _podcast = new PodcastPath(this, Keys.PODCAST_TAGS__PODCAST_TAGS_PODCASTS_ID_FKEY, null);

        return _podcast;
    }

    private transient TagPath _tag;

    /**
     * Get the implicit join path to the <code>public.tag</code> table.
     */
    public TagPath tag() {
        if (_tag == null)
            _tag = new TagPath(this, Keys.PODCAST_TAGS__PODCAST_TAGS_TAGS_ID_FKEY, null);

        return _tag;
    }

    @Override
    public PodcastTags as(String alias) {
        return new PodcastTags(DSL.name(alias), this);
    }

    @Override
    public PodcastTags as(Name alias) {
        return new PodcastTags(alias, this);
    }

    @Override
    public PodcastTags as(Table<?> alias) {
        return new PodcastTags(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PodcastTags rename(String name) {
        return new PodcastTags(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PodcastTags rename(Name name) {
        return new PodcastTags(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PodcastTags rename(Table<?> name) {
        return new PodcastTags(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PodcastTags where(Condition condition) {
        return new PodcastTags(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PodcastTags where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PodcastTags where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PodcastTags where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PodcastTags where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PodcastTags where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PodcastTags where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PodcastTags where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PodcastTags whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PodcastTags whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
