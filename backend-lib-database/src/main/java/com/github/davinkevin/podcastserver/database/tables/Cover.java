/*
 * This file is generated by jOOQ.
 */
package com.github.davinkevin.podcastserver.database.tables;


import com.github.davinkevin.podcastserver.database.Keys;
import com.github.davinkevin.podcastserver.database.Public;
import com.github.davinkevin.podcastserver.database.tables.Item.ItemPath;
import com.github.davinkevin.podcastserver.database.tables.Podcast.PodcastPath;
import com.github.davinkevin.podcastserver.database.tables.records.CoverRecord;

import java.util.Collection;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Cover extends TableImpl<CoverRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.cover</code>
     */
    public static final Cover COVER = new Cover();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoverRecord> getRecordType() {
        return CoverRecord.class;
    }

    /**
     * The column <code>public.cover.id</code>.
     */
    public final TableField<CoverRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.cover.height</code>.
     */
    public final TableField<CoverRecord, Integer> HEIGHT = createField(DSL.name("height"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("200"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.cover.url</code>.
     */
    public final TableField<CoverRecord, String> URL = createField(DSL.name("url"), SQLDataType.VARCHAR(65535).nullable(false).defaultValue(DSL.field(DSL.raw("'https://via.placeholder.com/200x200'::character varying"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.cover.width</code>.
     */
    public final TableField<CoverRecord, Integer> WIDTH = createField(DSL.name("width"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("200"), SQLDataType.INTEGER)), this, "");

    private Cover(Name alias, Table<CoverRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Cover(Name alias, Table<CoverRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.cover</code> table reference
     */
    public Cover(String alias) {
        this(DSL.name(alias), COVER);
    }

    /**
     * Create an aliased <code>public.cover</code> table reference
     */
    public Cover(Name alias) {
        this(alias, COVER);
    }

    /**
     * Create a <code>public.cover</code> table reference
     */
    public Cover() {
        this(DSL.name("cover"), null);
    }

    public <O extends Record> Cover(Table<O> path, ForeignKey<O, CoverRecord> childPath, InverseForeignKey<O, CoverRecord> parentPath) {
        super(path, childPath, parentPath, COVER);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CoverPath extends Cover implements Path<CoverRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> CoverPath(Table<O> path, ForeignKey<O, CoverRecord> childPath, InverseForeignKey<O, CoverRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CoverPath(Name alias, Table<CoverRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CoverPath as(String alias) {
            return new CoverPath(DSL.name(alias), this);
        }

        @Override
        public CoverPath as(Name alias) {
            return new CoverPath(alias, this);
        }

        @Override
        public CoverPath as(Table<?> alias) {
            return new CoverPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<CoverRecord> getPrimaryKey() {
        return Keys.COVER_PKEY;
    }

    private transient ItemPath _item;

    /**
     * Get the implicit to-many join path to the <code>public.item</code> table
     */
    public ItemPath item() {
        if (_item == null)
            _item = new ItemPath(this, null, Keys.ITEM__ITEM_COVER_ID_FKEY.getInverseKey());

        return _item;
    }

    private transient PodcastPath _podcast;

    /**
     * Get the implicit to-many join path to the <code>public.podcast</code>
     * table
     */
    public PodcastPath podcast() {
        if (_podcast == null)
            _podcast = new PodcastPath(this, null, Keys.PODCAST__PODCAST_COVER_ID_FKEY.getInverseKey());

        return _podcast;
    }

    @Override
    public Cover as(String alias) {
        return new Cover(DSL.name(alias), this);
    }

    @Override
    public Cover as(Name alias) {
        return new Cover(alias, this);
    }

    @Override
    public Cover as(Table<?> alias) {
        return new Cover(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Cover rename(String name) {
        return new Cover(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cover rename(Name name) {
        return new Cover(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cover rename(Table<?> name) {
        return new Cover(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cover where(Condition condition) {
        return new Cover(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cover where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cover where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cover where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Cover where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Cover where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Cover where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Cover where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cover whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cover whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
