/*
 * This file is generated by jOOQ.
 */
package com.github.davinkevin.podcastserver.database.tables;


import com.github.davinkevin.podcastserver.database.Keys;
import com.github.davinkevin.podcastserver.database.Public;
import com.github.davinkevin.podcastserver.database.tables.records.CoverRecord;

import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Cover extends TableImpl<CoverRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.cover</code>
     */
    public static final Cover COVER = new Cover();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoverRecord> getRecordType() {
        return CoverRecord.class;
    }

    /**
     * The column <code>public.cover.id</code>.
     */
    public final TableField<CoverRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.cover.height</code>.
     */
    public final TableField<CoverRecord, Integer> HEIGHT = createField(DSL.name("height"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("200"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.cover.url</code>.
     */
    public final TableField<CoverRecord, String> URL = createField(DSL.name("url"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field(DSL.raw("'https://via.placeholder.com/200x200'::character varying"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.cover.width</code>.
     */
    public final TableField<CoverRecord, Integer> WIDTH = createField(DSL.name("width"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("200"), SQLDataType.INTEGER)), this, "");

    private Cover(Name alias, Table<CoverRecord> aliased) {
        this(alias, aliased, null);
    }

    private Cover(Name alias, Table<CoverRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.cover</code> table reference
     */
    public Cover(String alias) {
        this(DSL.name(alias), COVER);
    }

    /**
     * Create an aliased <code>public.cover</code> table reference
     */
    public Cover(Name alias) {
        this(alias, COVER);
    }

    /**
     * Create a <code>public.cover</code> table reference
     */
    public Cover() {
        this(DSL.name("cover"), null);
    }

    public <O extends Record> Cover(Table<O> child, ForeignKey<O, CoverRecord> key) {
        super(child, key, COVER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<CoverRecord> getPrimaryKey() {
        return Keys.COVER_PKEY;
    }

    @Override
    public Cover as(String alias) {
        return new Cover(DSL.name(alias), this);
    }

    @Override
    public Cover as(Name alias) {
        return new Cover(alias, this);
    }

    @Override
    public Cover as(Table<?> alias) {
        return new Cover(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Cover rename(String name) {
        return new Cover(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cover rename(Name name) {
        return new Cover(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cover rename(Table<?> name) {
        return new Cover(name.getQualifiedName(), null);
    }
}
