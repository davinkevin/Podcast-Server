/*
 * This file is generated by jOOQ.
 */
package com.github.davinkevin.podcastserver.database.tables.records;


import com.github.davinkevin.podcastserver.database.tables.PlaylistItems;

import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PlaylistItemsRecord extends UpdatableRecordImpl<PlaylistItemsRecord> implements Record2<UUID, UUID> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.playlist_items.playlists_id</code>.
     */
    public void setPlaylistsId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.playlist_items.playlists_id</code>.
     */
    public UUID getPlaylistsId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.playlist_items.items_id</code>.
     */
    public void setItemsId(UUID value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.playlist_items.items_id</code>.
     */
    public UUID getItemsId() {
        return (UUID) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<UUID, UUID> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, UUID> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<UUID, UUID> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return PlaylistItems.PLAYLIST_ITEMS.PLAYLISTS_ID;
    }

    @Override
    public Field<UUID> field2() {
        return PlaylistItems.PLAYLIST_ITEMS.ITEMS_ID;
    }

    @Override
    public UUID component1() {
        return getPlaylistsId();
    }

    @Override
    public UUID component2() {
        return getItemsId();
    }

    @Override
    public UUID value1() {
        return getPlaylistsId();
    }

    @Override
    public UUID value2() {
        return getItemsId();
    }

    @Override
    public PlaylistItemsRecord value1(UUID value) {
        setPlaylistsId(value);
        return this;
    }

    @Override
    public PlaylistItemsRecord value2(UUID value) {
        setItemsId(value);
        return this;
    }

    @Override
    public PlaylistItemsRecord values(UUID value1, UUID value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PlaylistItemsRecord
     */
    public PlaylistItemsRecord() {
        super(PlaylistItems.PLAYLIST_ITEMS);
    }

    /**
     * Create a detached, initialised PlaylistItemsRecord
     */
    public PlaylistItemsRecord(UUID playlistsId, UUID itemsId) {
        super(PlaylistItems.PLAYLIST_ITEMS);

        setPlaylistsId(playlistsId);
        setItemsId(itemsId);
        resetChangedOnNotNull();
    }
}
