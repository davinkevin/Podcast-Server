apiVersion: v1
kind: Service
metadata:
  name: database
  labels:
    app: database
spec:
  ports:
    - name: pg-port
      port: 5432
      targetPort: 5432
      protocol: TCP
  selector:
    app: database
    module: backend
    serving: "true"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: database
spec:
  selector:
    matchLabels:
      app: database
      serving: "true"
  template:
    metadata:
      labels:
        app: database
        module: backend
        serving: "true"
    spec:
      terminationGracePeriodSeconds: 90
      containers:
        - image: postgres:16.1-alpine
          imagePullPolicy: IfNotPresent
          name: database
          env:
            - name: POSTGRES_USER
              valueFrom:
                configMapKeyRef:
                  name: database
                  key: username
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: database
                  key: password
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: database
                  key: name
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - su - postgres -c "pg_ctl stop -m fast"
          livenessProbe:
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U $POSTGRES_USER -d $POSTGRES_DB -h 127.1 -p 5432
          readinessProbe:
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - exec pg_isready -U $POSTGRES_USER -d $POSTGRES_DB -h 127.1 -p 5432
          ports:
            - name: pg-port
              containerPort: 5432
              protocol: TCP
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: database-backup
spec:
  schedule: "30 4 * * *"
  successfulJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - name: database-backup
              imagePullPolicy: IfNotPresent
              image: postgres:15.3-alpine
              env:
                - name: PGPASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: database
                      key: password
                - name: POSTGRES_USER
                  valueFrom:
                    configMapKeyRef:
                      name: database
                      key: username
                - name: POSTGRES_DB
                  valueFrom:
                    configMapKeyRef:
                      name: database
                      key: name
              command:
                - /bin/sh
              args:
                - -c
                - pg_dump -h database -U "$POSTGRES_USER" "$POSTGRES_DB" > backup.sql && tar zcvf /backup/podcast-server-$(date +"%Y-%m-%dT%H-%M-%S").tar.gz *.sql && rm backup.sql
          restartPolicy: OnFailure
